diff --git a/pkg/virt-operator/kubevirt.go b/pkg/virt-operator/kubevirt.go
index 73bbc59b6..082876813 100644
--- a/pkg/virt-operator/kubevirt.go
+++ b/pkg/virt-operator/kubevirt.go
@@ -23,6 +23,7 @@ import (
 	"context"
 	"encoding/json"
 	"fmt"
+	"os"
 	"sync"
 	"time"
 
@@ -46,7 +47,6 @@ import (
 	"kubevirt.io/kubevirt/pkg/controller"
 	"kubevirt.io/kubevirt/pkg/util/status"
 	"kubevirt.io/kubevirt/pkg/virt-operator/resource/apply"
-	"kubevirt.io/kubevirt/pkg/virt-operator/resource/generate/components"
 	install "kubevirt.io/kubevirt/pkg/virt-operator/resource/generate/install"
 	"kubevirt.io/kubevirt/pkg/virt-operator/util"
 	operatorutil "kubevirt.io/kubevirt/pkg/virt-operator/util"
@@ -704,7 +704,7 @@ func (c *KubeVirtController) execute(key string) error {
 
 func (c *KubeVirtController) generateInstallStrategyJob(config *operatorutil.KubeVirtDeploymentConfig) (*batchv1.Job, error) {
 
-	operatorImage := fmt.Sprintf("%s/%s%s%s", config.GetImageRegistry(), config.GetImagePrefix(), VirtOperator, components.AddVersionSeparatorPrefix(config.GetOperatorVersion()))
+	operatorImage := os.Getenv("OPERATOR_IMAGE")
 	deploymentConfigJson, err := config.GetJson()
 	if err != nil {
 		return nil, err
@@ -752,6 +752,34 @@ func (c *KubeVirtController) generateInstallStrategyJob(config *operatorutil.Kub
 								"--dump-install-strategy",
 							},
 							Env: []k8sv1.EnvVar{
+								{
+									Name:  "KUBEVIRT_VERSION",
+									Value: os.Getenv("KUBEVIRT_VERSION"),
+								},
+								{
+									Name:  "VIRT_API_IMAGE",
+									Value: os.Getenv("VIRT_API_IMAGE"),
+								},
+								{
+									Name:  "VIRT_CONTROLLER_IMAGE",
+									Value: os.Getenv("VIRT_CONTROLLER_IMAGE"),
+								},
+								{
+									Name:  "VIRT_HANDLER_IMAGE",
+									Value: os.Getenv("VIRT_HANDLER_IMAGE"),
+								},
+								{
+									Name:  "VIRT_LAUNCHER_IMAGE",
+									Value: os.Getenv("VIRT_LAUNCHER_IMAGE"),
+								},
+								{
+									Name:  "VIRT_EXPORTPROXY_IMAGE",
+									Value: os.Getenv("VIRT_EXPORTPROXY_IMAGE"),
+								},
+								{
+									Name:  "VIRT_EXPORTSERVER_IMAGE",
+									Value: os.Getenv("VIRT_EXPORTSERVER_IMAGE"),
+								},
 								{
 									// Deprecated, keep it for backwards compatibility
 									Name:  util.OperatorImageEnvName,
diff --git a/pkg/virt-operator/resource/generate/components/daemonsets.go b/pkg/virt-operator/resource/generate/components/daemonsets.go
index e5f7f073d..574197848 100644
--- a/pkg/virt-operator/resource/generate/components/daemonsets.go
+++ b/pkg/virt-operator/resource/generate/components/daemonsets.go
@@ -2,6 +2,7 @@ package components
 
 import (
 	"fmt"
+	"os"
 	"runtime"
 
 	appsv1 "k8s.io/api/apps/v1"
@@ -24,7 +25,7 @@ const (
 func NewHandlerDaemonSet(namespace string, repository string, imagePrefix string, version string, launcherVersion string, productName string, productVersion string, productComponent string, pullPolicy corev1.PullPolicy, migrationNetwork *string, verbosity string, extraEnv map[string]string) (*appsv1.DaemonSet, error) {
 
 	deploymentName := VirtHandlerName
-	imageName := fmt.Sprintf("%s%s", imagePrefix, deploymentName)
+	imageName := os.Getenv("VIRT_HANDLER_IMAGE")
 	env := operatorutil.NewEnvVarMap(extraEnv)
 	podTemplateSpec, err := newPodTemplateSpec(deploymentName, imageName, repository, version, productName, productVersion, productComponent, pullPolicy, nil, env)
 	if err != nil {
@@ -81,14 +82,13 @@ func NewHandlerDaemonSet(namespace string, repository string, imagePrefix string
 
 	// nodelabeller currently only support x86
 	if virtconfig.IsAMD64(runtime.GOARCH) {
-		launcherVersion = AddVersionSeparatorPrefix(launcherVersion)
 		pod.InitContainers = []corev1.Container{
 			{
 				Command: []string{
 					"/bin/sh",
 					"-c",
 				},
-				Image: fmt.Sprintf("%s/%s%s%s", repository, imagePrefix, "virt-launcher", launcherVersion),
+				Image: os.Getenv("VIRT_LAUNCHER_IMAGE"),
 				Name:  "virt-launcher",
 				Args: []string{
 					"node-labeller.sh",
diff --git a/pkg/virt-operator/resource/generate/components/deployments.go b/pkg/virt-operator/resource/generate/components/deployments.go
index 6fdd07c80..fd349d44c 100644
--- a/pkg/virt-operator/resource/generate/components/deployments.go
+++ b/pkg/virt-operator/resource/generate/components/deployments.go
@@ -20,6 +20,7 @@ package components
 
 import (
 	"fmt"
+	"os"
 	"path"
 	"strings"
 
@@ -150,8 +151,6 @@ func NewExportProxyService(namespace string) *corev1.Service {
 
 func newPodTemplateSpec(podName string, imageName string, repository string, version string, productName string, productVersion string, productComponent string, pullPolicy corev1.PullPolicy, podAffinity *corev1.Affinity, envVars *[]corev1.EnvVar) (*corev1.PodTemplateSpec, error) {
 
-	version = AddVersionSeparatorPrefix(version)
-
 	podTemplateSpec := &corev1.PodTemplateSpec{
 		ObjectMeta: metav1.ObjectMeta{
 			Labels: map[string]string{
@@ -167,7 +166,7 @@ func newPodTemplateSpec(podName string, imageName string, repository string, ver
 			Containers: []corev1.Container{
 				{
 					Name:            podName,
-					Image:           fmt.Sprintf("%s/%s%s", repository, imageName, version),
+					Image:           imageName,
 					ImagePullPolicy: pullPolicy,
 				},
 			},
@@ -304,7 +303,7 @@ func newPodAntiAffinity(key, topologyKey string, operator metav1.LabelSelectorOp
 func NewApiServerDeployment(namespace string, repository string, imagePrefix string, version string, productName string, productVersion string, productComponent string, pullPolicy corev1.PullPolicy, verbosity string, extraEnv map[string]string) (*appsv1.Deployment, error) {
 	podAntiAffinity := newPodAntiAffinity(kubevirtLabelKey, kubernetesHostnameTopologyKey, metav1.LabelSelectorOpIn, []string{VirtAPIName})
 	deploymentName := VirtAPIName
-	imageName := fmt.Sprintf("%s%s", imagePrefix, deploymentName)
+	imageName := os.Getenv("VIRT_API_IMAGE")
 	env := operatorutil.NewEnvVarMap(extraEnv)
 	deployment, err := newBaseDeployment(deploymentName, imageName, namespace, repository, version, productName, productVersion, productComponent, pullPolicy, podAntiAffinity, env)
 	if err != nil {
@@ -374,7 +373,7 @@ func NewApiServerDeployment(namespace string, repository string, imagePrefix str
 func NewControllerDeployment(namespace string, repository string, imagePrefix string, controllerVersion string, launcherVersion string, exportServerVersion string, productName string, productVersion string, productComponent string, pullPolicy corev1.PullPolicy, verbosity string, extraEnv map[string]string) (*appsv1.Deployment, error) {
 	podAntiAffinity := newPodAntiAffinity(kubevirtLabelKey, kubernetesHostnameTopologyKey, metav1.LabelSelectorOpIn, []string{VirtControllerName})
 	deploymentName := VirtControllerName
-	imageName := fmt.Sprintf("%s%s", imagePrefix, deploymentName)
+	imageName := os.Getenv("VIRT_CONTROLLER_IMAGE")
 	env := operatorutil.NewEnvVarMap(extraEnv)
 	deployment, err := newBaseDeployment(deploymentName, imageName, namespace, repository, controllerVersion, productName, productVersion, productComponent, pullPolicy, podAntiAffinity, env)
 	if err != nil {
@@ -387,18 +386,15 @@ func NewControllerDeployment(namespace string, repository string, imagePrefix st
 		RunAsNonRoot: boolPtr(true),
 	}
 
-	launcherVersion = AddVersionSeparatorPrefix(launcherVersion)
-	exportServerVersion = AddVersionSeparatorPrefix(exportServerVersion)
-
 	container := &deployment.Spec.Template.Spec.Containers[0]
 	container.Command = []string{
 		VirtControllerName,
 	}
 	container.Args = []string{
 		"--launcher-image",
-		fmt.Sprintf("%s/%s%s%s", repository, imagePrefix, "virt-launcher", launcherVersion),
+		os.Getenv("VIRT_LAUNCHER_IMAGE"),
 		"--exporter-image",
-		fmt.Sprintf("%s/%s%s%s", repository, imagePrefix, "virt-exportserver", exportServerVersion),
+		os.Getenv("VIRT_EXPORTSERVER_IMAGE"),
 		portName,
 		"8443",
 		"-v",
@@ -462,8 +458,7 @@ func NewOperatorDeployment(namespace string, repository string, imagePrefix stri
 	virtHandlerShaEnv string, virtLauncherShaEnv string, virtExportProxyShaEnv string, virtExportServerShaEnv string, gsShaEnv string) (*appsv1.Deployment, error) {
 
 	podAntiAffinity := newPodAntiAffinity(kubevirtLabelKey, kubernetesHostnameTopologyKey, metav1.LabelSelectorOpIn, []string{VirtOperatorName})
-	version = AddVersionSeparatorPrefix(version)
-	image := fmt.Sprintf("%s/%s%s%s", repository, imagePrefix, VirtOperatorName, version)
+	image := os.Getenv("OPERATOR_IMAGE")
 
 	deployment := &appsv1.Deployment{
 		TypeMeta: metav1.TypeMeta{
@@ -622,7 +617,7 @@ func NewOperatorDeployment(namespace string, repository string, imagePrefix stri
 func NewExportProxyDeployment(namespace string, repository string, imagePrefix string, version string, productName string, productVersion string, productComponent string, pullPolicy corev1.PullPolicy, verbosity string, extraEnv map[string]string) (*appsv1.Deployment, error) {
 	podAntiAffinity := newPodAntiAffinity(kubevirtLabelKey, kubernetesHostnameTopologyKey, metav1.LabelSelectorOpIn, []string{VirtAPIName})
 	deploymentName := VirtExportProxyName
-	imageName := fmt.Sprintf("%s%s", imagePrefix, deploymentName)
+	imageName := os.Getenv("VIRT_EXPORTPROXY_IMAGE")
 	env := operatorutil.NewEnvVarMap(extraEnv)
 	deployment, err := newBaseDeployment(deploymentName, imageName, namespace, repository, version, productName, productVersion, productComponent, pullPolicy, podAntiAffinity, env)
 	if err != nil {
diff --git a/pkg/virt-operator/util/config.go b/pkg/virt-operator/util/config.go
index 33e4ffbb6..ee06abbfe 100644
--- a/pkg/virt-operator/util/config.go
+++ b/pkg/virt-operator/util/config.go
@@ -244,8 +244,12 @@ func getConfig(registry, tag, namespace string, additionalProperties map[string]
 		}
 	}
 
-	passthroughEnv := GetPassthroughEnv()
+	kubeVirtVersionEnv := os.Getenv("KUBEVIRT_VERSION")
+	if kubeVirtVersionEnv != "" {
+		tag = kubeVirtVersionEnv
+	}
 
+	passthroughEnv := GetPassthroughEnv()
 	config := newDeploymentConfigWithTag(registry, imagePrefix, tag, namespace, additionalProperties, passthroughEnv)
 	if skipShasums {
 		return config
@@ -268,29 +272,17 @@ func getConfig(registry, tag, namespace string, additionalProperties map[string]
 }
 
 func VerifyEnv() error {
-	// ensure the operator image is valid
-	imageString := os.Getenv(OperatorImageEnvName)
-	if imageString == "" {
-		return fmt.Errorf("empty env var %s for operator image", OperatorImageEnvName)
-	}
-	imageRegEx := regexp.MustCompile(operatorImageRegex)
-	matches := imageRegEx.FindAllStringSubmatch(imageString, 1)
-	if len(matches) != 1 || len(matches[0]) != 4 {
-		return fmt.Errorf("can not parse operator image env var %s", imageString)
-	}
 
 	// ensure that all or no shasums are given
-	missingShas := make([]string, 0)
-	count := 0
-	for _, name := range []string{VirtApiShasumEnvName, VirtControllerShasumEnvName, VirtHandlerShasumEnvName, VirtLauncherShasumEnvName, KubeVirtVersionEnvName} {
-		count++
-		sha := os.Getenv(name)
-		if sha == "" {
-			missingShas = append(missingShas, name)
+	missingImageNames := make([]string, 0)
+	for _, name := range []string{"KUBEVIRT_VERSION", "OPERATOR_IMAGE", "VIRT_API_IMAGE", "VIRT_CONTROLLER_IMAGE", "VIRT_HANDLER_IMAGE", "VIRT_LAUNCHER_IMAGE", "VIRT_EXPORTPROXY_IMAGE", "VIRT_EXPORTSERVER_IMAGE"} {
+		imageName := os.Getenv(name)
+		if imageName == "" {
+			missingImageNames = append(missingImageNames, name)
 		}
 	}
-	if len(missingShas) > 0 && len(missingShas) < count {
-		return fmt.Errorf("incomplete configuration, missing env vars %v", missingShas)
+	if len(missingImageNames) > 0 {
+		return fmt.Errorf("incomplete configuration, missing env vars %v", missingImageNames)
 	}
 
 	return nil
